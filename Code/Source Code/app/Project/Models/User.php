<?php
/**
 * File: User.php
 * Created: 27-07-2014
 *
 * Description
 *
 * @author   Arpad Olasz <arpi@wingsline.com>
 */

namespace Project\Models;

use Project\Support\PasswordReminder\InvalidPasswordReminderException;
use Project\Support\PasswordReminder\InvalidPasswordReminderFormException;
use Story\Cipher;
use Story\Collection;
use Story\Error;
use Story\ORM;
use Story\Validator;

/**
 * Class User
 *
 * @property Collection profiles
 * @property mixed id
 * @package Project\Models
 */
class User extends ORM
{
    /**
     * How many minutes before the inactive users expire. Default: 1440 (1 day)
     */
    const INACTIVE_USER_EXPIRES = 1440;

    /**
     * Has relations
     *
     * @var array
     */
    public static $has = array(
        'profile'   => 'Project\Models\Profile',
        'biography' => 'Project\Models\UserBiography',
    );

    /**
     * Has many relations
     *
     * @var array
     */
    public static $has_many = array(
        'profiles'     => 'Project\Models\Profile',
        'data'         => 'Project\Models\UserData',
        'subscriptions' => 'Project\Models\Subscription',
    );

    /**
     * Has many through relations
     *
     * @var array
     */
    public static $has_many_through = array(
        'roles' => array(
            'user_id' => '\Project\Models\UserRole',
            'role_id' => '\Project\Models\Role'
        ),
    );

    /**
     * Foreign key name
     *
     * @var string
     */
    protected static $foreign_key = 'user_id';

    /**
     * Table name
     *
     * @var string
     */
    protected static $table = 'users';

    /**
     * Constructor
     *
     * @param int|mixed $id of the row or row object
     */
    public function __construct($id = 0)
    {

        require_once SP . 'Project/Support/Events/account_events.php';

        return parent::__construct($id);

    }

    /**
     * Changes the user's password with the supplied password reminder token
     *
     * @param $input
     * @param $token
     *
     * @return bool
     * @throws InvalidPasswordReminderException
     * @throws InvalidPasswordReminderFormException
     */
    public static function changePasswordWithToken($input, $token)
    {
        $input = array_map('html2text', $input);
        $input = array_map('trim', $input);
        $input['token'] = trim(html2text($token));

        // Get the reminder model

        /** @var PasswordReminder $reminder */
        $reminder = PasswordReminder::one(
            array(
                'token' => $input['token'],
                'created > ' . (time() - PasswordReminder::EXPIRES)
            )
        );

        if (!$reminder) {
            throw new InvalidPasswordReminderException('Invalid token supplied or token expired.');
        }

        $validator = new Validator($input);

        // email: required, email, must be the token's email, must be an active user's email
        $validator->rule('required', 'email');
        $validator->rule('email', 'email');
        $validator->rule('in', 'email', array($reminder->email))
            ->message(_('Invalid E-mail address.'));

        $validator->rule('exists', 'email', 'users', 'email', 'active', '=', '1')
            ->message(_('Invalid E-mail address.'));


        $validator->rule('required', 'new_password');
        $validator->rule('lengthMin', 'new_password', 8);
        $validator->rule('lengthMax', 'new_password', 200);

        $validator->rule('required', 'verify_new_password');
        $validator->rule('equals', 'verify_new_password', 'new_password');

        if ($validator->validate()) {

            /** @var User $user */
            $user = static::one(array('email' => $input['email'], 'active' => '1'));

            $user->password = base64_encode(Cipher::encrypt($input['new_password']));

            $user->save();

            // delete the password reminder
            $reminder->deleteReminder();

            event('account.updated', array($user, _('Password')));

            return true;
        }

        throw new InvalidPasswordReminderFormException($validator->errorsToNotification());
    }

    /**
     * Deletes the user
     *
     * @param null $id
     *
     * @return int
     */
    public function delete($id = null)
    {
        event('account.deleted', $this);
        return parent::delete($id); // TODO: Change the autogenerated stub
    }

    /**
     * Returns all users sorted by name
     *
     * @return array
     */
    public static function getAllByName()
    {

        static $userList = false;

        if ($userList !== false) {
            return $userList;
        }

        $users = new Collection(static::all());

        static::getAllUserProfiles(
            $users,
            static::$db->i('user_id'),
            static::$db->i('name'),
            static::$db->i('value'),
            static::$db->i('profiles')
        );

        // build the user list
        $userList = array();
        foreach ($users as $user) {
            $name = h($user->profile->findBy('name', 'name')->value) ?: $user->email;
            $userList[$user->id] = $name;
        }
        natsort($userList);

        return $userList;
    }

    /**
     * Returns all users sorted by name and email as key
     *
     * @return array
     */
    public static function getAllByEmail()
    {
        static $userList = false;

        if ($userList !== false) {
            return $userList;
        }

        $users = new Collection(static::all());

        static::getAllUserProfiles(
            $users,
            static::$db->i('user_id'),
            static::$db->i('name'),
            static::$db->i('value'),
            static::$db->i('profiles')
        );

        // build the user list
        $userList = array();
        foreach ($users as $user) {
            $name = h($user->profile->findBy('name', 'name')->value) ?: $user->email;
            $userList[$user->email] = $name;
        }
        natsort($userList);

        return $userList;
    }

    /**
     * Attaches the profiles for the selected users
     *
     * @param Collection $items
     * @param string     $user_id     Escaped 'user_id'
     * @param string     $name        Escaped 'name'
     * @param string     $value       Escaped 'value'
     * @param string     $profilesTbl Profiles table name
     */
    protected static function getAllUserProfiles(Collection $items, $user_id, $name, $value, $profilesTbl)
    {

        if (count($items)) {
            $ids = $items->lists();
            $idPlaceholders = trim(str_repeat('?,', count($ids)), ',');
            $sql = ("SELECT {$user_id},{$name},{$value} " .
                "FROM {$profilesTbl} WHERE {$user_id} IN ({$idPlaceholders})");
            $profiles = new Collection(static::$db->fetch($sql, $ids));

            foreach ($profiles as $profile) {
                $item = $items->findBy('id', $profile->user_id);
                if (!isset($item->profile)) {
                    $item->profile = new Collection();
                }
                $item->profile->push($profile);
            }

        }
    }

    /**
     * Returns the users with user_name as real name based on id's
     *
     * @param array $ids
     *
     * @return Collection
     */
    public static function getAllUsersByIds(array $ids)
    {
        $id = static::$db->i(static::$table . '.id');
        $name = static::$db->i('name');
        $profilesTbl = static::$db->i('profiles');
        $user_id = static::$db->i('user_id');
        $usersTbl = static::$db->i('users');
        $params = array_values($ids);
        $idPlaceholders = trim(str_repeat('?,', count($ids)), ',');

        $sql = "SELECT $usersTbl.*, $profilesTbl.value AS user_name " .
            "FROM $usersTbl " .
            "INNER JOIN $profilesTbl ON $id = $profilesTbl.$user_id AND $profilesTbl.$name = \"name\" " .
            "WHERE {$id} IN ({$idPlaceholders})";

        // execute the query
        $items = static::$db->fetch($sql, $params);
        foreach ($items as $index => $row) {
            $items[$index] = new static($row);
        }

        return new Collection($items);
    }
    /**
     * Lists the users by their profile name
     *
     * @param int $current  Current page
     * @param int $per_page Items per page
     *
     * @return array
     */
    public static function listUsersByName($current, $per_page)
    {

        $id = static::$db->i('id');
        $name = static::$db->i('name');
        $offset = $per_page * ($current - 1);
        $profilesTbl = static::$db->i('profiles');
        $user_id = static::$db->i('user_id');
        $usersTbl = static::$db->i('users');
        $value = static::$db->i('value');

        try {
            static::$db->pdo->beginTransaction();


            $sql = "SELECT $usersTbl.*, $profilesTbl.value AS user_name " .
                "FROM $usersTbl " .
                "INNER JOIN $profilesTbl ON $usersTbl.$id = $profilesTbl.$user_id AND $profilesTbl.$name = \"name\" " .
                "ORDER BY $profilesTbl.$value ASC " .
                "LIMIT $per_page OFFSET $offset";
            $items = new Collection(static::$db->fetch($sql));

            static::getAllUserProfiles($items, $user_id, $name, $value, $profilesTbl);

            // count the total

            $count = static::$db->select('COUNT(*)', 'users');
            $count = static::$db->column($count[0], $count[1]);

            static::$db->pdo->commit();

            return array('total' => $count, 'items' => $items);

        } catch (\Exception $e) {
            static::$db->pdo->rollBack();
            Error::exception($e);
        }

        return array('total' => 0, 'items' => new Collection());
    }

    /**
     * Lists the users by name filtering them by the query
     *
     * @param string $query
     * @param int    $current  Current page
     * @param int    $per_page Items per page
     *
     * @return array
     */
    public static function listUsersByQuery($query, $current, $per_page)
    {

        // since we have search query we search the user's profile and the user's email in the users table for matches
        $id = static::$db->i('id');
        $name = static::$db->i('name');
        $offset = $per_page * ($current - 1);
        $profilesTbl = static::$db->i('profiles');
        $user_id = static::$db->i('user_id');
        $usersTbl = static::$db->i('users');
        $value = static::$db->i('value');

        try {

            static::$db->pdo->beginTransaction();

            $where = query_to_where(
                $query,
                array("$profilesTbl." . static::$db->i('value'), "$usersTbl." . static::$db->i('email')),
                ''
            );
            $sql = "SELECT $usersTbl.*, $profilesTbl.value AS user_name " .
                "FROM $usersTbl " .
                "INNER JOIN $profilesTbl ON $usersTbl.$id = $profilesTbl.$user_id AND $profilesTbl.$name = \"name\" " .
                "WHERE " . $where['sql'] .
                "ORDER BY $profilesTbl.$value ASC " .
                "LIMIT $per_page OFFSET $offset";
            $items = new Collection(static::$db->fetch($sql, $where['values']));

            static::getAllUserProfiles($items, $user_id, $name, $value, $profilesTbl);

            // count the total
            $sql = "SELECT COUNT(*) as c FROM $usersTbl " .
                "INNER JOIN $profilesTbl ON $usersTbl.$id = $profilesTbl.$user_id AND $profilesTbl.$name = \"name\" " .
                "WHERE " . $where['sql'];
            /** @var \stdClass $count */
            $count = static::$db->row($sql, $where['values']);
            $count = $count->c;

            static::$db->pdo->commit();

            return array('total' => $count, 'items' => $items);

        } catch (\Exception $e) {

            static::$db->pdo->rollBack();
            Error::exception($e);
        }

        return array('total' => 0, 'items' => new Collection());
    }

    /**
     * Changes the password without the old password
     *
     * @param array $input
     *
     * @return bool|string
     */
    public function changeSelfPassword(array $input)
    {

        $input = array_map('trim', $input);

        $validator = new Validator($input);


        $validator->rule('required', 'new_password');
        $validator->rule('lengthMin', 'new_password', 8);
        $validator->rule('lengthMax', 'new_password', 200);

        $validator->rule('required', 'verify_new_password');
        $validator->rule('equals', 'verify_new_password', 'new_password')->message(_("Passwords doesn't match."));

        // if validation passes, we save and redirect
        if ($validator->validate()) {
            try {
                static::$db->pdo->beginTransaction();

                $this->set(
                    array(
                        'password'        => base64_encode(Cipher::encrypt($input['new_password'])),
                        'change_password' => 0
                    )
                );

                $this->save();

                // Commit Transaction
                static::$db->pdo->commit();

                event('account.updated', array($this, _('Password')));

                return true;

            } catch (\Exception $e) {
                static::$db->pdo->rollBack();
                Error::exception($e);

                return false;
            }
        }

        return $validator->errorsToNotification();
    }

    /**
     * Update the contact information for the user
     *
     * @param array $input
     *
     * @return bool|string
     */
    public function updateContact(array $input)
    {

        $input = array_map('html2text', $input);
        $input = array_map('trim', $input);

        $validator = new Validator($input);

        $validator->rule('required', 'address');
        $validator->rule('lengthMax', 'address', 200);

        $validator->rule('lengthMax', 'address2', 200);

        $validator->rule('required', 'city');
        $validator->rule('lengthMax', 'city', 200);

        $validator->rule('required', 'state');
        $validator->rule('lengthMax', 'state', 200);

        $validator->rule('required', 'zip');
        $validator->rule('lengthMax', 'zip', 200);

        $validator->rule('required', 'country');
        $validator->rule('lengthMax', 'country', 200);
        /** @noinspection PhpUnusedParameterInspection */
        $validator->addRule(
            'country',
            function ($field, $value) {

                return array_key_exists($value, require SP . 'config/countries.php');
            },
            _('Invalid {field}.')
        );
        $validator->rule('country', 'country');

        $validator->rule('required', 'phone');
        $validator->rule('lengthMax', 'phone', 200);

        if ($validator->validate()) {

            try {
                $updated = false;

                $updateArray = array('address', 'address2', 'city', 'state', 'zip', 'country', 'phone');

                static::$db->pdo->beginTransaction();

                foreach ($updateArray as $name) {
                    $default = new Profile();
                    $default->set(array('user_id' => $this->id, 'name' => $name, 'value' => ''));

                    $profile = $this->profiles->findBy('name', $name, $default);
                    if ($profile->value !== $input[$name]) {
                        $profile->value = $input[$name];
                        $profile->save();
                        $updated = true;
                    }
                }

                static::$db->pdo->commit();
                event('account.updated', array($this, _('Contact Information')));

                return $updated;
            } catch (\PDOException $e) {
                static::$db->pdo->rollBack();
                Error::exception($e);

                return false;
            }

        }

        return $validator->errorsToNotification();
    }

    /**
     * Updates the email and name for the current user
     *
     * @param $input
     *
     * @return bool|string
     */
    public function updateEmailAndName(array $input)
    {

        $input = array_map('trim', $input);
        $input['name'] = html2text($input['name']);

        $validator = new Validator($input);

        $validator->rule('required', 'name');
        $validator->rule('lengthMax', 'name', 200);

        $validator->rule('required', 'email');

        $validator->rule('unique', 'email', 'users', 'email', $input['email'], 'id', $this->id)
            ->message(_('{field} is taken.'));

        $validator->rule('email', 'email');

        // does the user wants to change their email address?

        if (post('verify_email') || post('email') != $this->email) {
            $validator->rule('required', 'verify_email');
            $validator->rule('email', 'verify_email');
            $validator->rule('equals', 'verify_email', 'email');
        }

        // if validation passes, we save and redirect
        if ($validator->validate()) {
            try {
                static::$db->pdo->beginTransaction();


                $updated = false;
                // Save the email if changed
                if ($input['verify_email'] && $this->email !== $input['email']) {
                    $this->attributes['original_email'] = $this->email;
                    $this->email = $input['email'];
                    $updated = true;
                }

                // save the email address if changed
                $this->save();

                // save the name in the profile
                $default = new Profile();
                $default->name = 'name';
                $default->user_id = $this->id;
                $name = $this->profiles->findBy('name', 'name', $default);

                if ($input['name'] !== $name->value) {
                    $updated = true;
                    $name->value = $input['name'];
                    $name->save();
                }

                // Commit Transaction
                static::$db->pdo->commit();

                if ($updated) {
                    event('account.updated', array($this, _('Name and Email address')));
                }

                return $updated;

            } catch (\Exception $e) {
                static::$db->pdo->rollBack();
                Error::exception($e);
            }
        }

        return $validator->errorsToNotification();
    }

    /**
     * Updates the users password
     *
     * @param $input
     *
     * @return bool|string
     */
    public function updatePassword(array $input)
    {

        $input = array_map('trim', $input);

        $validator = new Validator($input);

        $validator->rule('required', 'new_password');
        $validator->rule('lengthMin', 'new_password', 8);
        $validator->rule('lengthMax', 'new_password', 200);

        $validator->rule('required', 'verify_new_password');
        $validator->rule('equals', 'verify_new_password', 'new_password');

        // if validation passes, we save and redirect
        if ($validator->validate()) {
            try {
                static::$db->pdo->beginTransaction();

                $this->password = base64_encode(Cipher::encrypt($input['new_password']));

                $this->save();

                // Commit Transaction
                static::$db->pdo->commit();

                event('account.updated', array($this, _('Password')));

                return true;

            } catch (\Exception $e) {
                static::$db->pdo->rollBack();
                Error::exception($e);

                return false;
            }
        }

        return $validator->errorsToNotification();
    }

    /**
     * Updates the users password
     *
     * @param $input
     *
     * @return bool|string
     */
    public function updateSelfPassword(array $input)
    {

        $input = array_map('trim', $input);

        $validator = new Validator($input);

        $validator->rule('required', 'current_password');
        $validator->rule('password', 'current_password', 'users', 'password', $this->id)
            ->message(_('{field} was entered incorrectly.'));

        $validator->rule('required', 'new_password');
        $validator->rule('lengthMin', 'new_password', 8);
        $validator->rule('lengthMax', 'new_password', 200);

        $validator->rule('required', 'verify_new_password');
        $validator->rule('equals', 'verify_new_password', 'new_password');

        // if validation passes, we save and redirect
        if ($validator->validate()) {
            try {
                static::$db->pdo->beginTransaction();

                $this->password = base64_encode(Cipher::encrypt($input['new_password']));

                $this->save();

                // Commit Transaction
                static::$db->pdo->commit();

                event('account.updated', array($this, _('Password')));

                return true;

            } catch (\Exception $e) {
                static::$db->pdo->rollBack();
                Error::exception($e);

                return false;
            }
        }

        return $validator->errorsToNotification();
    }

    /**
     * Activates the current user
     */
    public function activateUser()
    {

        $this->set(
            array(
                'activation_token' => null,
                'active'           => '1',
                'modified'         => time()
            )
        );

        $this->save();
    }
}
